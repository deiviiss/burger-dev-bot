import { getAIResponse } from "@/services/ai-services";
import { clearHistory, handleHistory, getHistoryParse } from "@/utils/handleHistory";
import { addKeyword, EVENTS } from "@builderbot/bot";
import { BotState } from "@builderbot/bot/dist/types";
import prisma from "@/lib/prisma";
import { createUpdateUser } from "@/actions/users/create-update-user";
import { getUserByPhoneNumber } from "@/actions/users/get-user-by-phone-number";

const findCodePrompt = (history: string) => {
  const PROMPT = `
Eres un asistente encargado de confirmar pedidos de un men√∫ digital.
Tu tarea es revisar si el mensaje del usuario contiene un pedido generado desde el sistema, lo cual se identifica por un ID que sigue el formato: "C√≥digo de verificaci√≥n: BD-FTJE29" de una estructura de pedido como:

üõí Nuevo Pedido

1x Hamburguesa Sencilla - $45.00
1x Papas Fritas Chicas - $25.00
1x Coca-Cola - $20.00

Total: $90.00

C√≥digo de verificaci√≥n: BD-FTJE29

¬°Gracias por tu pedido! Por favor, presiona el bot√≥n de enviar mensaje para continuar.

Usa el historial de conversaci√≥n para identificar el pedido y el c√≥digo de verificaci√≥n. Si el mensaje del usuario contiene un pedido, responde con el c√≥digo de verificaci√≥n. Si no hay un pedido claro, responde no-code

No incluyas BD- en la respuesta, solo el c√≥digo de verificaci√≥n.

Historial de conversaci√≥n:
${history}

Ejemplo de respuestas:
FTJE29
no-code
`
  return PROMPT
}

const getTotalOrderPrompt = (history: string) => {
  const PROMPT = `
  Dado el historial de conversaci√≥n el cliente ya ha levantado su pedido lo que necesito es que me digas el total de su pedido.

  Responde solo con el total del pedido, sin m√°s informaci√≥n.
  Historial de conversaci√≥n:
  ${history}

  Responde solo con el total del pedido como n√∫mero decimal, sin el signo de pesos ni texto adicional. Ejemplo: 90.00

  Ejemplo de respuesta:
  90.00
  `
  return PROMPT
}

const getPaymentMethod = (paymentMethod: string): string => {
  const PROMPT = `
  El cliente ha indicado que su forma de pago es ${paymentMethod}. 
  Responde solo con la forma de pago, sin m√°s informaci√≥n.
  Si no es una forma de pago v√°lida, responde "no-payment".

De acuerdo a las opciones de pago que aceptamos, las formas de pago v√°lidas son:
  1- Transferencia Bancaria
  2- Efectivo
  3- Tarjeta de Cr√©dito/D√©bito

  Si escribe solo tarjeta significa que es Tarjeta tu respuesta

  Si el cliente menciona una forma de pago que no est√° en esta lista, responde "no-payment".
  Responde solo con la forma de pago, sin m√°s informaci√≥n.

  Ejemplo de las √∫nicas respuestas que puedes dar (no des otras):
  Transferencia Bancaria
  Tarjeta
  Efectivo
  no-payment
  `
  return PROMPT
}

const confirmOrderPrompt = ({
  history,
  name,
  address,
  paymentMethod,
  order,
  amountCash
}: {
  history: string;
  name: string;
  address: string;
  paymentMethod: string;
  amountCash: string;
  order: string;
}) => {
  const PROMPT = `
El cliente ya ha indicado los productos que desea y sus datos personales (nombre, direcci√≥n, m√©todo de pago). Tu tarea es confirmar el pedido con todos los datos, nombre, direcci√≥n, m√©todo de pago.

Usa el pedido adjunto para identificar:
- Qu√© productos pidi√≥ el cliente
- Las cantidades y variaciones (si las mencion√≥)
- Cualquier instrucci√≥n adicional

PEDIDO ADJUNTO:
${order}

Historial de conversaci√≥n:
${history}

Nombre del cliente: ${name}
Domicilio de entrega: ${address}
Forma de pago: ${paymentMethod}
Paga con: ${amountCash} //Esto solo va si el pago es en efectivo
--- FIN DEL PEDIDO ---

Despu√©s, responde con un resumen amable del pedido con nombre, direcci√≥n, m√©todo de pago y pregunta si est√° todo bien o desea modificar algo.
No saludes al cliente, solo responde con el resumen del pedido.

Ejemplo de respuesta:
Aqu√≠ est√° el resumen de tu pedido:
1x Hamburguesa Sencilla - $45.00
1x Papas Fritas Chicas - $25.00
1x Coca-Cola - $20.00

Total: $90.00

A nombre de: ${name}
Domicilio de entrega: ${address}
Forma de pago: ${paymentMethod}
Tiempo de entrega: 35 minutos

Por favor, revisa y confirma si todo est√° correcto o si deseas hacer alg√∫n cambio. üòä

S√© claro, amable y mant√©n un tono cercano, como si atendieras por WhatsApp.
`
  return PROMPT
}

const validateConfirmation = (history: string) => {
  const PROMPT = `
Eres una inteligencia artificial que analiza respuestas de clientes en WhatsApp despu√©s de que se les muestra un resumen de su pedido y total.

Tu tarea es determinar si el cliente "confirm√≥ que todo est√° correcto" o si indic√≥ que desea hacer "alg√∫n cambio".

Respuesta del cliente:
${history}

Solo responde con una de estas dos opciones:
- "CONFIRMADO" ‚Üí si la respuesta es positiva, clara o contiene frases como "s√≠", "todo bien", "correcto", "as√≠ est√° bien", "gracias", "perfecto", "ok", "adelante", etc.
- "MODIFICAR" ‚Üí si la respuesta sugiere alg√∫n cambio, duda, correcci√≥n, o si no est√° seguro.

Ejemplos:
"S√≠, todo bien." ‚Üí CONFIRMADO  
"Solo cambia la coca por una sprite." ‚Üí MODIFICAR  
"Gracias, as√≠ est√° perfecto." ‚Üí CONFIRMADO  
"Me equivoqu√© con la direcci√≥n." ‚Üí MODIFICAR  
"Est√° bien as√≠ üòä" ‚Üí CONFIRMADO

Respuesta ideal: (CONFIRMADO|MODIFICAR)
  `
  return PROMPT
}

// FLOWS

// This flow is used to confirm the order and get the verification code
const flowConfirm = addKeyword(EVENTS.ACTION)
  .addAction(async (_, { state, flowDynamic, endFlow }) => {
    console.log('===== FLOW CONFIRM =====')
    const history = getHistoryParse(state as BotState)
    try {
      const verificationCode = await getAIResponse(findCodePrompt(history))
      console.log('verificationCode:', verificationCode.toString().trim())
      const totalOrder = await getAIResponse(getTotalOrderPrompt(history))

      if (!verificationCode || verificationCode.trim() === '') {
        await flowDynamic(`No pudimos encontrar un c√≥digo de verificaci√≥n v√°lido. Por favor, realiza tu pedido nuevamente desde el men√∫ digital. üòä`)
        await clearHistory(state as BotState)
        return endFlow()
      }

      if (verificationCode.trim().toLowerCase() === 'no-code') {
        await flowDynamic(`Por favor realiza tu pedido en nuestro men√∫ digital para tener un c√≥digo de verificaci√≥n. Aqu√≠ est√° el enlace:   

https://menu-digital-indol.vercel.app üòä`)

        await clearHistory(state as BotState)
        return endFlow()
      }

      if (!totalOrder || isNaN(Number(totalOrder.trim()))) {
        await flowDynamic(`No pudimos obtener el total de tu pedido. Por favor, realiza tu pedido nuevamente desde el men√∫ digital. üòä`)
        await clearHistory(state as BotState)
        return endFlow()
      }

      const orderDB = await prisma.order.findFirst({
        where: {
          shortId: verificationCode.toString().trim(),
          status: 'PENDING',
        },
        select: {
          id: true,
          shortId: true,
          totalPrice: true,
          status: true,
          createdAt: true,
          address: true,
          comment: true,
          items: {
            select: {
              quantity: true,
              unitPrice: true,
              product: {
                select: {
                  name: true,
                  price: true,
                },
              },
              promotion: {
                select: {
                  name: true,
                  promoPrice: true,
                },
              },
            },
          },
        },
      });

      if (!orderDB) {
        await flowDynamic(`No encontramos tu pedido. Por favor, realiza uno nuevo en nuestro men√∫ digital:
          
https://burgerdev-demo.vercel.app üòä`)
        await clearHistory(state as BotState)
        return endFlow()
      }

      if (verificationCode.trim() !== orderDB?.shortId) {
        await flowDynamic(`Parece que el c√≥digo ha expirado. Por favor, realiza tu pedido en nuestro men√∫ digital para tener un c√≥digo de verificaci√≥n actualizado. Aqu√≠ est√° el enlace:

https://menu-digital-indol.vercel.app üòä`)

        await clearHistory(state as BotState)
        return endFlow()
      }

      if (Number(totalOrder.trim()) !== orderDB?.totalPrice) {
        await flowDynamic(`Parece que tu pedido ha cambiado. Por favor, revisa tu pedido en nuestro men√∫ digital para tener un c√≥digo de verificaci√≥n actualizado. Aqu√≠ est√° el enlace:

https://menu-digital-indol.vercel.app üòä`)
        await clearHistory(state as BotState)
        return endFlow()
      }

      // Format the order to send it to the AI
      const order = {
        ...orderDB,
        items: orderDB.items.map(item => ({
          quantity: item.quantity,
          unitPrice: item.unitPrice,
          productName: item.product?.name || null,
          promotionName: item.promotion?.name || null,
        }))
      };

      await state.update({ order: order })
    } catch (error) {
      console.error('Error en el flujo de confirmaci√≥n:', error)
      await flowDynamic(`Ocurri√≥ un error al procesar tu pedido, por favor intenta de nuevo m√°s tarde. üòä`)
      await clearHistory(state as BotState)
      return endFlow()
    }
  })
  .addAction(async (_, { flowDynamic, gotoFlow }) => {
    await flowDynamic('Perfecto, ahora solo necesito algunos datos antes de enviarlo üòä')

    await flowDynamic('Solo ser√°n 3 preguntas r√°pidas para completar tu pedido üìù', {
      delay: 1000
    })


    return gotoFlow(flowAsks)
  })

// This flow is used to ask for the name, address and payment method of the user
// ==================================================================================
const flowAsks = addKeyword(EVENTS.ACTION)
  .addAction(async (_, { flowDynamic }) => {
    await flowDynamic('¬øQui√©n recibe?')
  })
  .addAction({ capture: true }, async (ctx, { state, flowDynamic, fallBack }) => {
    const name = ctx.body

    if (name.includes('_event_')) {
      await flowDynamic(`No puedo procesar im√°genes, audios o archivos en este paso. üôà`), {
        delay: 1000
      };
      await flowDynamic(`Por favor, escribe tu nombre con letras. ‚úçÔ∏è`, {
        delay: 1000
      });
      return fallBack();
    }

    // normalize name
    await state.update({ name: name.trim().replace(/\b\w/g, c => c.toUpperCase()) })

    await flowDynamic(`Gracias, ¬øCu√°l es el domicilio de entrega?`, {
      delay: 1500
    })
    await flowDynamic('Por favor, incluye la calle, n√∫mero, colonia y cualquier referencia que consideres importante. üè†', {
      delay: 1000
    })
  })
  .addAction({ capture: true }, async (ctx, { state, flowDynamic, fallBack }) => {
    const address = ctx.body

    if (address.includes('_event_')) {
      await flowDynamic(`No puedo procesar im√°genes, audios o archivos en este paso. üôà`, {
        delay: 1000
      });

      await flowDynamic(`Por favor, escribe tu direcci√≥n con letras. ‚úçÔ∏è`, {
        delay: 1000
      });
      await flowDynamic('Incluye la calle, n√∫mero, colonia y cualquier referencia que consideres importante. üè†', {
        delay: 1000
      })
      return fallBack();
    }

    await state.update({ address: address })

    await flowDynamic('Correcto, ¬øCu√°l es tu forma de pago? üí≥', {
      delay: 1500
    })
    await flowDynamic('Aceptamos transferencia bancaria, efectivo y tarjetas de d√©bito/cr√©dito. Por favor, ind√≠canos cu√°l prefieres. üòä', {
      delay: 1000
    })
  })
  .addAction({ capture: true }, async (ctx, { state, flowDynamic, fallBack, gotoFlow }) => {
    const paymentMethod = ctx.body

    if (paymentMethod.includes('_event_')) {
      await flowDynamic(`No puedo procesar im√°genes, audios o archivos en este paso. üôà`), {
        delay: 1000
      };
      await flowDynamic(`Por favor, escribe escr√≠beme el n√∫mero o nombre de la opci√≥n que prefieras. üòä`, {
        delay: 1000
      });
      await flowDynamic('1- Transferencia Bancaria\n2- Efectivo\n3- Tarjeta de Cr√©dito/D√©bito', {
        delay: 1000
      })
      return fallBack();
    }

    const paymentMethodFormat = await getAIResponse(getPaymentMethod(paymentMethod))
    await state.update({ paymentMethod: paymentMethodFormat })
    console.log('paymentMethod:', paymentMethodFormat)
    if (paymentMethodFormat.trim().toLowerCase() === 'no-payment') {
      await flowDynamic(`Opci√≥n no reconocida. Por favor, escr√≠beme el n√∫mero o nombre de la opci√≥n que prefieras. üòä`)
      return fallBack('1- Transferencia Bancaria\n2- Efectivo\n3- Tarjeta de Cr√©dito/D√©bito')
    }

    if (paymentMethodFormat.includes('Efectivo')) {
      return gotoFlow(flowCashSelect)
    }

    if (paymentMethodFormat.includes('Transferencia')) {
      return gotoFlow(flowTransferSelect)
    }

    if (paymentMethodFormat.includes('Tarjeta')) {
      await flowDynamic('Perfecto, nuestro repartidor lleva consigo su terminal bancaria',
        {
          delay: 1500
        }
      )
      return gotoFlow(flowConfirmOrder)
    }
  }
  )

/**
 * This flow handles the user's payment method selection and routes to the appropriate flow
 * depending on the selected payment method (Cash, Bank Transfer, or Card).
 */
const flowConfirmOrder = addKeyword(EVENTS.ACTION)
  .addAction(async (_, { flowDynamic, state }) => {
    const history = getHistoryParse(state as BotState)
    console.log('Historial parseado in Asks:', history)
    console.log('============ end Historial parseado in Asks =================')
    const name = state.get('name')
    console.log('name:', name)
    const address = state.get('address')
    console.log('address:', address)
    const paymentMethod = state.get('paymentMethod')
    console.log('paymentMethod:', paymentMethod)
    const order = state.get('order')
    console.log('order:', order)
    const amountCash = state.get('amountCash')

    const result = await getAIResponse(confirmOrderPrompt({
      history, name, address, paymentMethod, order, amountCash
    }))
    await handleHistory({ content: result, role: 'assistant' }, state as BotState)
    console.log('Resultado:', result)

    await flowDynamic(result)
  })
  .addAction({ capture: true }, async (ctx, { state, flowDynamic, endFlow, fallBack }) => {
    const confirmation = ctx.body

    if (confirmation.includes('_event_')) {
      await flowDynamic(`No puedo procesar im√°genes, audios, archivos o mensajes especiales en este paso. üôà`, {
        delay: 1000
      });
      await flowDynamic(`Por favor, responde si todo est√° correcto o si deseas modificar algo. üòä`, {
        delay: 1000
      });

      return fallBack()
    }

    await handleHistory({ content: confirmation, role: 'user' }, state as BotState)
    const history = getHistoryParse(state as BotState)

    const result = await getAIResponse(validateConfirmation(history))

    if (result.trim().toUpperCase() === 'CONFIRMADO') {
      let user
      //! Create or update the user in the database could be a utility function
      // create a new user if it doesn't exist
      user = await getUserByPhoneNumber(ctx.from)

      if (!user) {
        const newUser = await createUpdateUser({
          name: state.get('name'),
          phoneNumber: ctx.from
        })

        if (!newUser.ok) {
          {
            await flowDynamic(`Ocurri√≥ un error al crear tu usuario, por favor intenta de nuevo m√°s tarde. üòä`)
            await clearHistory(state as BotState)
            return endFlow()
          }
        }
        user = newUser.user
        await state.update({ newUser: user.id })
      }

      // Update the order in the database
      await prisma.order.update({
        where: {
          shortId: state.get('order').shortId
        },
        data: {
          userId: user.id,
          address: state.get('address'),
          comment: state.get('paymentMethod'),
          status: 'IN_PROGRESS'
        }
      })

      await prisma.user.update({
        where: {
          id: user.id
        },
        data: {
          name: state.get('name')
        }
      })

      // Send message to the restaurant
      console.log('Enviando mensaje a la cocina...')
      await fetch(`${process.env.DOMAIN}/v1/messages`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          number: '+5219811250049',
          message: `üì¶ Un cliente ha completado la demostraci√≥n posiblemente este interesado.

Te dejo sus datos:
          
- Nombre: ${state.get('name')}
- Tel√©fono: ${ctx.from}
          `
          // message: `üì¶ Nuevo pedido confirmado de ${state.get('name')}.\nDirecci√≥n: ${state.get('address')}\nM√©todo de pago: ${state.get('paymentMethod')}`
        })
      })

      await flowDynamic('¬°Perfecto! Tu pedido ha sido confirmado y ya esta siendo preparado. üòä', {
        delay: 1500
      })
      await flowDynamic('Tiempo estimado de entrega: 35 minutos. ‚è≥', {
        delay: 1500
      })

      await flowDynamic(`üìå Este pedido fue una simulaci√≥n.

As√≠ funcionar√≠a con tus propios clientes si tienes tu propio men√∫ digital. üòä
        `,
        {
          delay: 3000
        })

      await flowDynamic(`üçîüçïü•ó Si te animas a tener tu propio men√∫ digital, escr√≠beme al *9811250049* y con gusto te ayudo. üòä
        `,
        {
          delay: 2500
        })

      await flowDynamic(`Hasta luego üëã`,
        {
          delay: 1000
        })

      if (state.get('newUser')) {
        await flowDynamic(`üéâ ¬°Felicidades! Has completado la demo del men√∫ digital exitosamente.`,
          {
            delay: 1000
          })
        await flowDynamic(`Como agradecimiento, aqu√≠ tienes tu c√≥digo de descuento: *H0LA18* üéÅ`,
          {
            delay: 1000
          }
        )
        await flowDynamic(`Este c√≥digo te da *$199 de descuento* en la compra de tu propio men√∫ digital. Es v√°lido hasta el *5 de junio de 2025*.`,
          {
            delay: 1000
          }
        )
        await flowDynamic(`Si te interesa activarlo o tienes dudas, *m√°ndame un mensaje* y con gusto te ayudo. ¬°Gracias por probar la demo! üòä`,
          {
            delay: 1000
          })
      }

      await clearHistory(state as BotState)
      return endFlow()
    }

    if (result.trim().toUpperCase() === 'MODIFICAR') {
      await flowDynamic(`Para modificar tu pedido, por favor vuelve a nuestro men√∫ digital y modifica tu pedido, luego haz click en el bot√≥n de *Pedir por WhatsApp* desde el carrito del men√∫ digital:

https://menu-digita-indol.vercel.app üòä`)

      await flowDynamic(`Si quieres modificar los datos de entrega escribe "MODIFICAR" üòä`)

      return endFlow()
    }
  }
  )

// This flow is used to modify the delivery data, it should be used when the user wants to change the delivery data
// ==================================================================================
const flowModify = addKeyword('MODIFICAR')
  .addAction(async (_, { state, gotoFlow, endFlow, flowDynamic }) => {
    const order = await state.get('order')

    // If the order is not found, end the flow
    if (!order) {
      await flowDynamic(`Por favor realiza tu pedido en nuestro men√∫ digital para tener un c√≥digo de verificaci√≥n. Aqu√≠ est√° el enlace:   

https://menu-digital-indol.vercel.app üòä`)

      await clearHistory(state as BotState)
      return endFlow()
    }

    return gotoFlow(flowAsks)
  })

// This flow is triggered when the user selects "Bank Transfer" as the payment method.
// It provides the bank account details and asks the user to send the payment receipt.
const flowTransferSelect = addKeyword(EVENTS.ACTION)
  .addAction(async (_, { flowDynamic }) => {
    await flowDynamic(`¬°Perfecto! Aqu√≠ tienes los datos bancarios para realizar tu transferencia:

      Banco: BBVA
      Cuenta: 0123456789
      CLABE: 012345678901234567
      Titular: Burger Bot Demo
  
      Por favor, realiza la transferencia y env√≠ame el comprobante. üòä`)
  })
  .addAction({ capture: true }, async (ctx, { flowDynamic, fallBack, gotoFlow, endFlow, state }) => {
    const confirmation = ctx.body

    const isImage = !confirmation.includes('_event_location_') || !confirmation.includes('_event_voice_') || !confirmation.includes('_event_document')

    if (!isImage) {
      await flowDynamic(`No puedo procesar ubicaciones, audios, archivos o mensajes especiales en este paso. üôà`, {
        delay: 1000
      });
      await flowDynamic(`Por favor, responde con el comprobante si has completado la transferencia o si deseas cancelar el pedido escribe "Cancelar". üòä`, {
        delay: 1000
      });

      return fallBack()
    }

    if (confirmation.includes('_event_media_')) {
      //! Procesar image con AI
      await state.update({ paymenMethod: 'Transferencia Bancaria' })
      await flowDynamic('Validando...', {
        delay: 2500
      })
      await flowDynamic('¬°Correcto!', {
        delay: 2000
      })
      return gotoFlow(flowConfirmOrder)
    }

    if (confirmation.trim().toLowerCase() !== 'cancelar') {
      await flowDynamic(`Por favor, responde con el comprobante si has completado la transferencia o si deseas cancelar el pedido escribe "Cancelar". üòä`, {
        delay: 1000
      });
      return fallBack()
    }

    if (confirmation.trim().toLowerCase() === 'cancelar') {
      // TODO: update model order
      await flowDynamic('Hasta luego!')
      await flowDynamic(`Si deseas hacer un nuevo pedido, puedes volver a nuestro men√∫ digital en cualquier momento: 
        
https://burgerdev-demo.vercel.app üòä`)
      return endFlow()
    }
  })

// This flow is triggered when the user selects "Cash" as the payment method.
// It asks how much money the customer will pay with in order to calculate the change.
const flowCashSelect = addKeyword(EVENTS.ACTION)
  .addAction(async (_, { flowDynamic }) => {
    await flowDynamic('¬øCon cu√°nto pagas? üí∞')
  })
  .addAction({ capture: true }, async (ctx, { state, flowDynamic, fallBack, gotoFlow }) => {
    const amount = ctx.body
    console.log('amount', amount)
    if (amount.includes('_events_')) {
      await flowDynamic(`No puedo procesar im√°genes, audios o archivos en este paso. üôà`, {
        delay: 1000
      });

      await flowDynamic(`Por favor, escribe con cuanto pagas en n√∫meros. ‚úçÔ∏è`, {
        delay: 1000
      });

      return fallBack()
    }

    // Parse and validate amount as a number
    const parsedAmount = parseFloat(amount.replace(/[^0-9.,]/g, '').replace(',', '.'));

    if (isNaN(parsedAmount)) {
      await flowDynamic(`Por favor, escribe con cuanto pagas en n√∫meros. Ejemplo: 200 o 200.00 ‚úçÔ∏è`, {
        delay: 1000
      });
      return fallBack();
    }

    await state.update({ amountCash: parsedAmount });

    return gotoFlow(flowConfirmOrder)
  })

export { flowConfirm, flowAsks, flowModify, flowConfirmOrder, flowCashSelect, flowTransferSelect }
